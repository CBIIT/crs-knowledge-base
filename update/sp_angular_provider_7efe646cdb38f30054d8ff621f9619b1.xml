<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_angular_provider">
    <sp_angular_provider action="INSERT_OR_UPDATE">
        <name>NERDSubmission</name>
        <script><![CDATA[function NERDSubmission($http){
	this.getSchema = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				url: '/api/x_26385_crs_kd/export/getDocumentSchema',
				method: 'GET',
				beforeSend: function(xhr){xhr.setRequestHeader('X-UserToken', sessionId); },
				headers: {
					'Content-Type': 'application/json'
				},
				params: {'category': params.id}
			}).then(resolve, reject);
		});
	};
	
	this.getSubmissionSchema = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				url: '/api/x_26385_crs_kd/export/getSubmissionSchema',
				method: 'GET',
				beforeSend: function(xhr){xhr.setRequestHeader('X-UserToken', sessionId); },
				headers: {
					'Content-Type': 'application/json'
				},
				params: {'category': params.id}
			}).then(resolve, reject);
		});
	};
	
	this.getSubmissionList = function(params,sessionId){
		return new Promise(function(resolve, reject){
			$http({
				url: '/api/x_26385_crs_kd/export/getSubmissionList',
				method: 'GET',
				beforeSend: function(xhr){xhr.setRequestHeader('X-UserToken', sessionId); },
				headers: {
					'Content-Type': 'application/json'
				},
				params: {'type': params.type, 'doc': params.doc, 'category': params.category}
			}).then(resolve, reject);
		});
	};
	
	this.getSubmissionWithSchema = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				url: '/api/x_26385_crs_kd/export/getSubmissionWithSchema',
				method: 'GET',
				beforeSend: function(xhr){xhr.setRequestHeader('X-UserToken', sessionId); },
				headers: {
					'Content-Type': 'application/json'
				},
				params: params
			}).then(resolve, reject);
		});
	};
	
	this.saveDraft = function(template, params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/saveDraft',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({'template': template, 'params':params}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.updateDraft = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/updateDraft',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({params:params}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.submit2DOC = function(sub_id, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/submit2DOC',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({sub_id:sub_id}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.validation = function(sub_ids, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/getSubmissionValidation',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({sub_ids:sub_ids}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.submit2CRS = function(sub_id, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/submit2CRS',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({sub_id:sub_id}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.multiSubmit2CRS = function(sub_ids, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/multiSubmit2CRS',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({sub_ids:sub_ids}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.multiPublish2NERD = function(sub_ids, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/multiPublish2NERD',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({sub_ids:sub_ids}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.publish2NERD = function(sub_id, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/publish2NERD',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({sub_id:sub_id}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.rejectByDOC = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/rejectByDOC',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({params:params}),
				 processData: false
			}).then(resolve, reject);
		});
	}
	
	this.rejectByCRS = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/rejectByCRS',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({params:params}),
				 processData: false
			}).then(resolve, reject);
		});
	}
	
	this.multiReturn2DOC = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/multiReturn2DOC',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({params:params}),
				 processData: false
			}).then(resolve, reject);
		});
	}
	
	this.saveEntry = function(template, params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/saveEntry',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify({'template': template, 'params':params}),
				 processData: false
			}).then(resolve, reject);
		});
	};
	
	this.saveAttachment = function(params, sessionId){
		return new Promise(function(resolve, reject){
			$http({
				 url: '/api/x_26385_crs_kd/export/saveAttachment',
				 method : "POST",
				 beforeSend: function(xhr){ xhr.setRequestHeader('X-UserToken', sessionId); },
				 headers: {'Content-Type': 'application/json'},
				 data: JSON.stringify(params),
				 processData: false
			}).then(resolve, reject);
		});
	};
}]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>yuw5@nih.gov</sys_created_by>
        <sys_created_on>2019-04-10 14:17:02</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7efe646cdb38f30054d8ff621f9619b1</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>NERDSubmission</sys_name>
        <sys_package display_value="CRS Knowledge Database" source="x_26385_crs_kd">404e613b4f9213007221e321a310c738</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="CRS Knowledge Database">404e613b4f9213007221e321a310c738</sys_scope>
        <sys_update_name>sp_angular_provider_7efe646cdb38f30054d8ff621f9619b1</sys_update_name>
        <sys_updated_by>yuw5@nih.gov</sys_updated_by>
        <sys_updated_on>2020-01-23 20:31:19</sys_updated_on>
        <type>service</type>
    </sp_angular_provider>
</record_update>
