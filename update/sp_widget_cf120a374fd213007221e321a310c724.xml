<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope, $scope, $location, $http,NERDSearch) {
	/* widget controller */
	//document.getElementById("progressing-bar").style.display = "flex";
	//$scope.$emit('crs.header.display', false);
	var c = this;
	
	var s = $location.search();
	
	c.data.searchString = "";
	c.data.selectedYear = [];
	c.data.selectedDoc = [];
	c.data.selectedCancerSite = [];
	c.data.selectedResearchType = [];
	c.data.selectedSpecialTopic = [];
	c.data.selectedCmit = [];
	c.data.selectedThemesGoals = [];
	c.data.selectedRecommendation = [];
	
	c.data.selectedCategory = [];
	
	if(s.kb_knowledge_base){
		var kb_id = s.kb_knowledge_base;
		c.data.knowledgeBases.forEach(function(kb){
			if(kb_id == kb.id){
				c.data.selectedKnowledgeBase = kb;
			}
		});
	}
	else{
		c.data.selectedKnowledgeBase = c.data.knowledgeBases[0]	;
	}
	
	c.data.maxSize = 5;
	c.data.pageSize = {};
	c.data.bigCurrentPage = {};
	c.selectedCategories = {};
	
	c.pageChanged = function() {
    
  };
	
	c.swithKnowledgeBase = function(){
		//c.createFilter();
		//c.search();
		s.xpage = 'kd_search';
    s.kb_knowledge_base = c.data.selectedKnowledgeBase.id;
		//console.log(s);
    $location.search(s).replace();
	}
	
	c.createFilter = function(){
		if(c.data.selectedKnowledgeBase.name == "NERD"){
			var params = {
									knowledgeBaseID: c.data.selectedKnowledgeBase.id
								 };
		
			NERDSearch.getFilters(params,c.data.sessionId).then(function(res){
				var stat = res.data.result;
				c.data.filters = stat.filters;
				c.data.tmp = stat.tmp;
				c.data.count = stat.count;
				c.data.doc = [];
				var cache = c.data.tmp.doc;
				cache.sort();
				cache.forEach(function(elem){
					c.data.doc.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.doc[elem]});
				});

				c.data.cancerSite = [];
				cache = c.data.tmp.cancerSite;
				cache.sort();
				cache.forEach(function(elem){
					c.data.cancerSite.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.cancerSite[elem]});
				});
				c.data.researchType = [];
				cache = c.data.tmp.researchType;
				cache.sort();
				var toDisplay = ['{Basic}','{Translational}','{Clinical}','{Epidemiological}'];
				cache.forEach(function(elem){
					//c.data.researchType.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.researchType[elem]});
					if(toDisplay.indexOf(elem) > -1){
						c.data.researchType.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.researchType[elem]});
					}
				});
				c.data.specialTopic = [];
				cache = c.data.tmp.specialTopic;
				cache.sort();
				cache.forEach(function(elem){
					c.data.specialTopic.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.specialTopic[elem]});
				});
				c.data.fiscalYear = [];
				cache = c.data.tmp.fiscalYear;
				cache.sort();
				cache.forEach(function(elem){
					c.data.fiscalYear.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.fiscalYear[elem]});
				});

				$scope.$apply();
				
			}, function(error){
				console.log(error);
			});
		}
		else if(c.data.selectedKnowledgeBase.name == "CRS Internal"){
			var params = {
									knowledgeBaseID: c.data.selectedKnowledgeBase.id
								 };
		
			NERDSearch.getFilters(params,c.data.sessionId).then(function(res){
				var stat = res.data.result;
				c.data.filters = stat.filters;
				$scope.$apply();
				
			}, function(error){
				console.log(error);
			});
		}
		else if(c.data.selectedKnowledgeBase.name == "Moonshot Evaluation"){
			var params = {
									knowledgeBaseID: c.data.selectedKnowledgeBase.id
								 };
		
			NERDSearch.getFilters(params,c.data.sessionId).then(function(res){
				var stat = res.data.result;
				c.data.filters = stat.filters;
				c.data.tmp = stat.tmp;
				c.data.count = stat.count;
				
				c.data.recommendation = [];
				var cache = c.data.tmp.recommendation;
				cache.sort();
				cache.forEach(function(elem){
					c.data.recommendation.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.recommendation[elem]});
				});

				c.data.themesGoals = [];
				cache = c.data.tmp.themesGoals;
				cache.sort();
				cache.forEach(function(elem){
					c.data.themesGoals.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.themesGoals[elem]});
				});
				
				c.data.cmit = [];
				cache = c.data.tmp.cmit;
				cache.sort();
				cache.forEach(function(elem){
					c.data.cmit.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.cmit[elem]});
				});
				
				c.data.fiscalYear = [];
				cache = c.data.tmp.fiscalYear;
				cache.sort();
				cache.forEach(function(elem){
					c.data.fiscalYear.push({id: elem, name: elem.substring(1, elem.length -1), count: c.data.count.fiscalYear[elem]});
				});

				$scope.$apply();
				
			}, function(error){
				console.log(error);
			});
		}
		
	}
	
	c.search = function() {
		document.getElementById("progressing-bar").style.display = "flex";
		if(c.data.selectedKnowledgeBase.name == "NERD"){
			var params = {
									searchString: c.data.searchString && c.data.searchString !== ""? c.data.searchString : "", 
									knowledgeBaseID: c.data.selectedKnowledgeBase.id,
			            selectedYears: c.data.selectedYear.length > 0 ? c.data.selectedYear.join(",") : "",
									selectedDocs: c.data.selectedDoc.length > 0 ? c.data.selectedDoc.join(",") : "",
									selectedCancerSites: c.data.selectedCancerSite.length > 0 ? c.data.selectedCancerSite.join(",") : "",
									selectedResearchTypes: c.data.selectedResearchType.length > 0 ? c.data.selectedResearchType.join(",") : "",
			            selectedSpecialTopics: c.data.selectedSpecialTopic.length > 0 ? c.data.selectedSpecialTopic.join(",") : ""
								 };
		
			NERDSearch.getList(params,c.data.sessionId).then(function(res){
				c.data.tabs = res.data.result.searchResults;
				
				var idx = 0;
				c.resultLen = 0;
				c.data.selectedCategory = [];
				
				c.data.tabs.forEach(function(t){
					t.isOpen = true;
					c.selectedCategories[t.name] = idx++;
					c.resultLen += t.list.length;
					c.data.pageSize[t.name] = 10;
					c.data.bigCurrentPage[t.name] = 1;
					c.data.selectedCategory.push(t.name);
				});
				document.getElementById("cb_selectAll").checked = false;
				c.selectedCount = 0;
				c.isExportable = false;
        $scope.$apply();
				document.getElementById("progressing-bar").style.display = "none";
			}, function(error){
				console.log(error);
			});
		}
		else if(c.data.selectedKnowledgeBase.name == "CRS Internal"){
			var params = {
									searchString: c.data.searchString && c.data.searchString !== ""? c.data.searchString : "", 
									knowledgeBaseID: c.data.selectedKnowledgeBase.id
								 };
		
			NERDSearch.getList(params,c.data.sessionId).then(function(res){
				c.data.tabs = res.data.result.searchResults;
				
				var idx = 0;
				c.resultLen = 0;
				c.data.selectedCategory = [];
				
				c.data.tabs.forEach(function(t){
					t.isOpen = true;
					c.selectedCategories[t.name] = idx++;
					c.resultLen += t.list.length;
					c.data.pageSize[t.name] = 10;
					c.data.bigCurrentPage[t.name] = 1;
					c.data.selectedCategory.push(t.name);
				});
				document.getElementById("cb_selectAll").checked = false;
				c.selectedCount = 0;
				c.isExportable = false;
        $scope.$apply();
				document.getElementById("progressing-bar").style.display = "none";
			}, function(error){
				console.log(error);
			});
		}
		else if(c.data.selectedKnowledgeBase.name == "Moonshot Evaluation"){
			var params = {
									searchString: c.data.searchString && c.data.searchString !== ""? c.data.searchString : "", 
									knowledgeBaseID: c.data.selectedKnowledgeBase.id,
			            selectedYears: c.data.selectedYear.length > 0 ? c.data.selectedYear.join(",") : "",
									selectedCmit: c.data.selectedCmit.length > 0 ? c.data.selectedCmit.join(",") : "",
									selectedThemesGoals: c.data.selectedThemesGoals.length > 0 ? c.data.selectedThemesGoals.join(",") : "",
									selectedRecommendation: c.data.selectedRecommendation.length > 0 ? c.data.selectedRecommendation.join(",") : ""
								 };
		
			NERDSearch.getList(params,c.data.sessionId).then(function(res){
				c.data.tabs = res.data.result.searchResults;
				
				var idx = 0;
				c.resultLen = 0;
				c.data.selectedCategory = [];
				
				c.data.tabs.forEach(function(t){
					t.isOpen = true;
					c.selectedCategories[t.name] = idx++;
					c.resultLen += t.list.length;
					c.data.pageSize[t.name] = 10;
					c.data.bigCurrentPage[t.name] = 1;
					c.data.selectedCategory.push(t.name);
				});
				document.getElementById("cb_selectAll").checked = false;
				c.selectedCount = 0;
				c.isExportable = false;
        $scope.$apply();
				document.getElementById("progressing-bar").style.display = "none";
			}, function(error){
				console.log(error);
			});
		}
		
	};
	
	c.gotoDetail = function(sys_id,template_id, number){
		var hasFilter = false;
		var criteria = "";
		//save searchCriteria to global scope
		if(c.data.searchString && c.data.searchString !== ""){
			hasFilter = true;
			criteria += "&f1="+c.data.searchString;
		}
		if(c.data.selectedYear.length > 0){
			hasFilter = true;
			criteria += "&f2="+c.data.selectedYear.join('|');
		}
		if(c.data.selectedDoc.length > 0){
			hasFilter = true;
			criteria += "&f3="+c.data.selectedDoc.join('|');
		}
		if(c.data.selectedCancerSite.length > 0){
			hasFilter = true;
			criteria += "&f4="+c.data.selectedCancerSite.join('|');
		}
		if(c.data.selectedResearchType.length > 0){
			hasFilter = true;
			criteria += "&f5="+c.data.selectedResearchType.join('|');
		}
		if(c.data.selectedSpecialTopic.length > 0){
			hasFilter = true;
			criteria += "&f6="+c.data.selectedSpecialTopic.join('|');
		}
		if(c.data.selectedRecommendation.length > 0){
			hasFilter = true;
			criteria += "&f7="+c.data.selectedRecommendation.join('|');
		}
		if(c.data.selectedThemesGoals.length > 0){
			hasFilter = true;
			criteria += "&f8="+c.data.selectedThemesGoals.join('|');
		}
		if(c.data.selectedCmit.length > 0){
			hasFilter = true;
			criteria += "&f9="+c.data.selectedCmit.join('|');
		}
		//redirect to detail page
		s.xpage = 'kd_article';
		s.aid = sys_id;
		s.number = number;
		s.tid = template_id;
		s.hasFilter = hasFilter?'1':'0';
		//$location.search(s).replace();
		var url = '/nerd?xpage=kd_article_view&kb_knowledge_base='+c.data.selectedKnowledgeBase.id+'&aid='+s.aid+'&number='+s.number+'&tid='+s.tid+'&hasFilter='+s.hasFilter;
		if(s.hasFilter == '1'){
			url += criteria; 
		}
		window.open(url, '_blank');
	}
	
	c.gotoNewSubmission = function(tmpl){
		//redirect to detail page
		var p = {};
		p.xpage = 'kd_new_submission';
		p.template = tmpl;
		//$location.search(s).replace();
		var url = '/nerd?xpage='+p.xpage+'&template='+p.template;
		window.open(url, '_blank');
	}
	
	c.selectAll_Category = function(){
		var selectAll = document.getElementById("selectAll_Category");
		c.data.selectedCategory = [];
		c.resultLen = 0 ;
		if(selectAll.checked){
			var tmp = [];
			c.data.tabs.map(function(obj){
				tmp.push(obj.name);
				obj.show = true;
				c.resultLen += obj.list.length;
			});
			c.data.selectedCategory = tmp;
			 
		}
		else{
			c.data.tabs.map(function(obj){
				obj.show = false;
			});
			c.resultLen = 0;
		}
		
	}
	
	c.updateFilter = function(cat){
		if(cat.selected){
			c.data.selectedCategory.push(cat.name);
		}
		else{
			var idx = c.data.selectedCategory.indexOf(cat.name);
			if (idx > -1) {
				c.data.selectedCategory.splice(idx, 1);
			}
		}
		
		var idx = c.selectedCategories[cat.name];
		c.resultLen += cat.selected?c.data.tabs[idx].list.length: -c.data.tabs[idx].list.length;
		if(c.resultLen == 0){
			document.getElementById("cb_selectAll").checked = false;
			c.isExportable = false;
		}
		c.data.tabs[idx].show = !c.data.tabs[idx].show;
	}
	
	c.reset = function() {
		c.data.searchString = "";
		//c.data.selectedKnowledgeBase = {id: '-1', name: 'All'};
		c.data.selectedYear = [];
		c.data.selectedDoc = [];
	  c.data.selectedCancerSite = [];
		c.data.selectedResearchType = [];
		c.data.selectedSpecialTopic = [];
		c.search();
	};
	
	//Search on enter key pressed
	var searchBox = document.getElementById("kbSearchInput");
		searchBox.addEventListener("keyup", function(event) {
		// Cancel the default action, if needed
		event.preventDefault();
		// Number 13 is the "Enter" key on the keyboard
		if (event.keyCode === 13) {
			// Trigger the button element with a click
			c.search();
		}
	});
	
	var selectAll = document.getElementById("cb_selectAll");
	
	selectAll.addEventListener('click', function() {
				var elements = document.getElementsByName("selections");
				if(this.checked) {
					for (var i = 0; i < elements.length; i++) {
						elements[i].checked = true;
					}
					c.isExportable = true;
				} else {
					for (var j = 0; j < elements.length; j++) {
						elements[j].checked = false;
					}
					c.isExportable = false;
				}
			}, false); 
	
	c.change = function(value){
		if(value){
			c.isExportable = true;
			c.selectedCount++;
		}
		else{
			c.selectedCount--;
			if(c.selectedCount <= 0){
				document.getElementById("cb_selectAll").checked = false;
				c.isExportable = false;
			}
		}
	}
	
	c.updateCancerSiteData = function(item){
		if(item.selected){
			c.data.selectedCancerSite.push(item.id);
		}
		else{
			var idx = c.data.selectedCancerSite.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedCancerSite.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_CancerSite = function(){
		var selectAll = document.getElementById("selectAll_CancerSite");
		c.data.selectedCancerSite = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.cancerSite.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedCancerSite = tmp;
		}
		c.search();
	}
	
	c.updateResearchTypeData = function(item){
		if(item.selected){
			c.data.selectedResearchType.push(item.id);
		}
		else{
			var idx = c.data.selectedResearchType.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedResearchType.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_ResearchType = function(){
		var selectAll = document.getElementById("selectAll_ResearchType");
		c.data.selectedResearchType = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.researchType.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedResearchType = tmp;
		}
		c.search();
	}
	
	c.updateSpecialTopicData = function(item){
		if(item.selected){
			c.data.selectedSpecialTopic.push(item.id);
		}
		else{
			var idx = c.data.selectedSpecialTopic.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedSpecialTopic.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_SpecialTopic = function(){
		var selectAll = document.getElementById("selectAll_SpecialTopic");
		c.data.selectedSpecialTopic = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.specialTopic.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedSpecialTopic = tmp;
		}
		c.search();
	}
	
	c.updateDocData = function(item){
		if(item.selected){
			c.data.selectedDoc.push(item.id);
		}
		else{
			var idx = c.data.selectedDoc.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedDoc.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_Doc = function(){
		var selectAll = document.getElementById("selectAll_Doc");
		c.data.selectedDoc = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.doc.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedDoc = tmp;
		}
		c.search();
	}
	
	c.updateRecommendationData = function(item){
		if(item.selected){
			c.data.selectedRecommendation.push(item.id);
		}
		else{
			var idx = c.data.selectedRecommendation.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedRecommendation.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_Recommendation = function(){
		var selectAll = document.getElementById("selectAll_Recommendation");
		c.data.selectedRecommendation = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.recommendation.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedRecommendation = tmp;
		}
		c.search();
	}
	
	c.updateThemesGoalsData = function(item){
		if(item.selected){
			c.data.selectedThemesGoals.push(item.id);
		}
		else{
			var idx = c.data.selectedThemesGoals.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedThemesGoals.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_ThemesGoals = function(){
		var selectAll = document.getElementById("selectAll_ThemesGoals");
		c.data.selectedThemesGoals = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.themesGoals.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedThemesGoals = tmp;
		}
		c.search();
	}
	
	c.updateCmitData = function(item){
		if(item.selected){
			c.data.selectedCmit.push(item.id);
		}
		else{
			var idx = c.data.selectedCmit.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedCmit.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_Cmit = function(){
		var selectAll = document.getElementById("selectAll_Cmit");
		c.data.selectedCmit = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.cmit.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedCmit = tmp;
		}
		c.search();
	}
	
	c.updateYearData = function(item){
		if(item.selected){
			c.data.selectedYear.push(item.id);
		}
		else{
			var idx = c.data.selectedYear.indexOf(item.id);
			if (idx > -1) {
				c.data.selectedYear.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.selectAll_Year = function(){
		var selectAll = document.getElementById("selectAll_Year");
		c.data.selectedYear = [];
		if(selectAll.checked){
			var tmp = [];
			c.data.fiscalYear.map(function(obj){
				tmp.push(obj.id);
			});
			c.data.selectedYear = tmp;
		}
		c.search();
	};
	
	var htmlToWord = (function() {
      var uri = 'data:text/html,';
      var template = '<html xmlns:office="urn:schemas-microsoft-com:office:office" xmlns:word="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><xml><word:WordDocument><word:View>Print</word:View><word:Zoom>90</word:Zoom><word:DoNotOptimizeForBrowser/></word:WordDocument></xml></head><body>{content}</body></html>';
      return function(data) {
				 var a = document.createElement('a');
					document.body.appendChild(a);
					a.setAttribute('style', 'display:none');
					a.setAttribute('href', uri + encodeURIComponent((template.replace("{content}",data))));
					var today = new Date();
					var dd = today.getDate();
					var mm = today.getMonth()+1;
					var yyyy = today.getFullYear();

					if(dd<10) {
							dd = '0'+dd
					} 

					if(mm<10) {
							mm = '0'+mm
					} 

					today = yyyy + "-"+ mm + "-" + dd;	
					a.setAttribute('download', "NERD_report_"+today+".doc");
					a.click();
          document.body.removeChild(a);
      }
    })()
	
  c.export2Excel = function () {
		var req = {
		 method: 'POST',
		 url: '/api/x_26385_crs_kd/export/excel',
		 headers: {
			 'Content-Type': 'application/json'
		 }
		}
		
		req.data = {};
		req.data.files = [];
		document.getElementsByName('selections').forEach(function(obj){
			if(obj.checked){
				var fs = {};
				var info = obj.value.split(',');
				fs.sys_id = info[0];
				//fs.kb = info[1];
				fs.category = info[2];
				req.data.files.push(fs);
			}
		});

		$http(req).then(function(resp){
			var content = resp.data.result.content;
			var data = [];
			var div = document.createElement("div");
			content.forEach(function(ct){
					//var tmp = {};
					//tmp["Date entered"] = ct.published;
					//tmp.Database = ct.database;
					//tmp.Category = ct.category;
					//tmp.Title = ct.title;
					//tmp["Research Type"] = ct.x_26385_crs_kd_u_kb_research_type;
					//tmp["Fiscal Year"] = ct.x_26385_crs_kd_u_kb_fiscal_year;
				if(ct["Description"] !== ""){
					div.innerHTML = ct["Description"];
					ct["Description"] = div.textContent || div.innerText || "";
				}

				if(ct["References"] !== ""){
					div.innerHTML = ct["References"];
					ct["References"] = div.textContent || div.innerText || "";
				}

				if(ct["Involved organization"] !== ""){
					div.innerHTML = ct["Involved organization"];
					ct["Involved organization"] = div.textContent || div.innerText || "";
				}

				if(ct["Summary"] !== ""){
					div.innerHTML = ct["Summary"];
					ct["Summary"] = div.textContent || div.innerText || "";
				}

				if(ct["Background"] !== ""){
					div.innerHTML = ct["Background"];
					ct["Background"] = div.textContent || div.innerText || "";
				}

				if(ct["Target Context and Conditions"] !== ""){
					div.innerHTML = ct["Target Context and Conditions"];
					ct["Target Context and Conditions"] = div.textContent || div.innerText || "";
				}
				data.push(ct);
			});
			
			/* generate a worksheet */
			var ws = XLSX.utils.json_to_sheet(data);

			/* add to workbook */
			var wb = XLSX.utils.book_new();
			XLSX.utils.book_append_sheet(wb, ws, "sheet1");

			/* write workbook and force a download */
			var today = new Date();
			var dd = today.getDate();
			var mm = today.getMonth()+1;
			var yyyy = today.getFullYear();

			if(dd<10) {
					dd = '0'+dd
			} 

			if(mm<10) {
					mm = '0'+mm
			} 

			today = yyyy + "-"+ mm + "-" + dd;
			XLSX.writeFile(wb, "NERD_report_"+today+".xlsx");
		}, function(error_resp){
			console.log(error_resp);
		});
  }
	
	c.export2Word = function () {
		var req = {
		 method: 'POST',
		 url: '/api/x_26385_crs_kd/export/word',
		 headers: {
			 'Content-Type': 'application/json'
		 }
		}
		
		req.data = {};
		req.data.files = [];
		document.getElementsByName('selections').forEach(function(obj){
			if(obj.checked){
				var fs = {};
				var info = obj.value.split(',');
				fs.sys_id = info[0];
				//fs.kb = info[1];
				fs.category = info[2];
				req.data.files.push(fs);
			}
		});

		$http(req).then(function(resp){
			var content = resp.data.result.content;
			var dt = '';
			content.forEach(function(ct){
					dt += '<p style="text-align:center;font-size:24px; font-weight:bold;">'+ct.title+'</p>';
					dt += '<h3>Category:</h3>';
					dt += '<p>'+ct.category+'</p>';
				  for(var key in ct){
						if(key != 'title'){
							dt += '<h3>'+key+':</h3>';
							dt += '<p>'+ct[key]+'</p>';
						}
					}
			});
			htmlToWord(dt);
		}, function(error_resp){
			console.log(error_resp);
		});
		
  }
	
	c.createFilter();
	
	if(s.search){
		c.data.searchString = s.search;
	}
	else if(s.hasFilter && s.hasFilter == '1'){
		if(c.data.selectedKnowledgeBase.name == "NERD"){
			c.data.searchString = $rootScope.searchString;
			c.data.selectedDoc = $rootScope.selectedDoc?$rootScope.selectedDoc : [];
			c.data.selectedCancerSite = $rootScope.selectedCancerSite?$rootScope.selectedCancerSite : [];
			c.data.selectedResearchType = $rootScope.selectedResearchType?$rootScope.selectedResearchType : [];
			c.data.selectedSpecialTopic = $rootScope.selectedSpecialTopic?$rootScope.selectedSpecialTopic : [];
			
		}
		else if(c.data.selectedKnowledgeBase.name == "Moonshot Evaluation"){
			c.data.selectedYear = $rootScope.selectedYear?$rootScope.selectedYear : [];
			c.data.selectedCmit = $rootScope.selectedCmit?$rootScope.selectedCmit : [];
			c.data.selectedThemesGoals = $rootScope.selectedThemesGoals?$rootScope.selectedThemesGoals : [];
			c.data.selectedRecommendation = $rootScope.selectedRecommendation?$rootScope.selectedRecommendation : [];
		}
	}
	c.search();
}]]></client_script>
        <controller_as>c</controller_as>
        <css>
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>crs-kd-search</id>
        <internal>false</internal>
        <link/>
        <name>[crs] KD Search</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function($location) {
	data.sessionId = gs.getSession().getSessionToken();
	data.knowledgeBases = [];
	data.knowledgeBases.push({name:"NERD", id:"f5644dcadb54ab0054d8ff621f9619d7"});
	data.knowledgeBases.push({name:"CRS Internal", id:"ff315a9edba47340b86770c08c961999"});
	data.knowledgeBases.push({name:"Moonshot Evaluation", id:"2c42d2dedba47340b86770c08c9619a9"});
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-06-01 19:53:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>cf120a374fd213007221e321a310c724</sys_id>
        <sys_mod_count>1131</sys_mod_count>
        <sys_name>[crs] KD Search</sys_name>
        <sys_package display_value="CRS Knowledge Database" source="x_26385_crs_kd">404e613b4f9213007221e321a310c738</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="CRS Knowledge Database">404e613b4f9213007221e321a310c738</sys_scope>
        <sys_update_name>sp_widget_cf120a374fd213007221e321a310c724</sys_update_name>
        <sys_updated_by>yuw5@nih.gov</sys_updated_by>
        <sys_updated_on>2019-04-25 20:28:11</sys_updated_on>
        <template><![CDATA[<div class="container">
  <div class="row">
        <div class="col-md-3">
            <!-- 3 columns search menu 

            <div class="crs-sidebar-info">
                <div class="details" title="NCI Encyclopedia and Repository Database">
                  <b>NCI E</b>ncyclopedia and <b>R</b>epository <b>D</b>atabase
                </div>
            </div>
          	-->
            <div class="panel panel-default margin-10">

                <div>

                    <div class="form-group">
                        <div class="control-label" for="kbSelect">Knowledge Base:</div>
                      <div class="form-content">
                         <select class="form-control" name="kbSelect" id="kbSelect" ng-options="option.name for option in c.data.knowledgeBases track by option.id"
                            ng-model="c.data.selectedKnowledgeBase" ng-change="c.swithKnowledgeBase()">
                        </select>
                      </div>                       
                    </div>

                    <div class="form-group">
                      <div class="control-label" for="cancerSiteSelect">Filters: <span class="tooltip-icon" uib-tooltip="Search tags across this Knowledge Base." tooltip-placement="right" tooltip-class="tooltipClass"><i class="fa fa-question-circle" aria-hidden="true"></i></span>
                      </div>
                      <div class="facet-scroll"> 
                        <div class="filter-section" ng-if="c.data.filters.includes('cancerSite')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Cancer Site/Type  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_CancerSite" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_CancerSite()" ng-checked="c.data.selectedCancerSite.length != 0  && c.data.selectedCancerSite.length == c.data.cancerSite.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.cancerSite">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateCancerSiteData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedCancerSite.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        <div class="filter-section" ng-if="c.data.filters.includes('researchType')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Research Type  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_ResearchType" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_ResearchType()" ng-checked="c.data.selectedResearchType.length != 0  && c.data.selectedResearchType.length == c.data.researchType.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.researchType">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateResearchTypeData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedResearchType.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        <div class="filter-section" ng-if="c.data.filters.includes('specialTopic')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Special Topic  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_SpecialTopic" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_SpecialTopic()" ng-checked="c.data.selectedSpecialTopic.length != 0  && c.data.selectedSpecialTopic.length == c.data.specialTopic.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.specialTopic">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateSpecialTopicData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedSpecialTopic.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        <div class="filter-section" ng-if="c.data.filters.includes('doc')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">DOC  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_Doc" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_Doc()" ng-checked="c.data.selectedDoc.length != 0  && c.data.selectedDoc.length == c.data.doc.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.doc">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateDocData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedDoc.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        
                        <div class="filter-section" ng-if="c.data.filters.includes('recommendation')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Moonshot Recommendation  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_Recommendation" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_Recommendation()" ng-checked="c.data.selectedRecommendation.length != 0  && c.data.selectedRecommendation.length == c.data.recommendation.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.recommendation">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateRecommendationData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedRecommendation.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        
                        <div class="filter-section" ng-if="c.data.filters.includes('themesGoals')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Cross-Cutting Themes and Goals  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_ThemesGoals" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_ThemesGoals()" ng-checked="c.data.selectedThemesGoals.length != 0  && c.data.selectedThemesGoals.length == c.data.themesGoals.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.themesGoals">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateThemesGoalsData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedThemesGoals.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        
                        <div class="filter-section" ng-if="c.data.filters.includes('cmit')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">CMIT  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_Cmit" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_Cmit()" ng-checked="c.data.selectedCmit.length != 0  && c.data.selectedCmit.length == c.data.cmit.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.cmit">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateCmitData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedCmit.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                        
                        <div class="filter-section" ng-if="c.data.filters.includes('fiscalYear')">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Fiscal Year  </span> <span class="caret"></span></button>
                          <ul class="dropdown-menu" style="width:100%;">
                            <li class="dropdown-options">
                              <input type="checkbox" id="selectAll_Year" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_Year()" ng-checked="c.data.selectedYear.length != 0  && c.data.selectedYear.length == c.data.fiscalYear.length">&nbsp;All
                            </li>
                            <li class="dropdown-options" ng-repeat="cat in c.data.fiscalYear">
                              <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateYearData(cat)" value="{{cat.id}}" role="checkbox" aria-invalid="false" ng-checked="true" ng-checked="c.data.selectedYear.indexOf(cat.id) > -1">&nbsp;{{cat.name}} ({{cat.count}})
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  
                  	<div class="form-group form-btns">
                       <button type="submit" class="btn btn-link" ng-click="c.reset();">reset</button> 
                  	</div>

                    <!-- end form -->
                </div>
            </div>

            <!-- End of search column -->
        </div>


        <div class="col-md-9 margin-10">
            <!-- 9 columns results -->
 
                <div class="form-searchBox">
                    <label for="inputSuccess" class="control-label sr-only">${Search}</label>
                    <div class="input-group">
                        <input type="text" class="form-control" name="kbSearchInput" id="kbSearchInput" placeholder="{{::data.enterSearchStr}}" ng-model="c.data.searchString">
                        <span class="input-group-btn">
                            <button type="submit" class="btn btn-default" ng-click="c.search('0');">
                                <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                            </button>
                        </span>
                    </div>
                </div>


                <div class="panel panel-default panel-relative">

                    <div class="panel-head panel-relative">
                      <div class="panel-title">
                        <span class="count text">{{c.resultLen}} Results</span>
                      </div>
                      <div class="panel-action" ng-if="c.isExportable">
                        <button class="btn btn-link" ng-click="c.export2Excel()">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Excel 
                        </button>
                        <button class="btn btn-link" ng-click="c.export2Word()">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Word
                        </button>
                        <span class="tooltip-icon" 
                              uib-tooltip="To export results, first click “Select All” box or select the box next to desired individual entries. Then click the Export to [Excel or Word] button." 
                              tooltip-placement="top" tooltip-class="tooltipClass">
                          <i class="fa fa-question-circle" aria-hidden="true"></i>
                        </span>
                      </div>
                      <div class="panel-action" ng-if="!c.isExportable">
                        <button class="btn btn-disable">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Excel
                        </button>
                        <button class="btn btn-disable">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Word
                        </button>
                        <span class="tooltip-icon" 
                              uib-tooltip="To export results, first click “Select All” box or select the box next to desired individual entries. Then click the Export to [Excel or Word] button." 
                              tooltip-placement="top" tooltip-class="tooltipClass">
                          <i class="fa fa-question-circle" aria-hidden="true"></i>
                        </span>
                      </div>
                    </div>
                  
                    <div class="panel-head panel-relative">
                      <div class="filter-select">
                        <span class="panel-bar">
                          <input type="checkbox" class="checkbox checkbox-all" id="cb_selectAll" name="selectAll" value="all"> Select All
                        </span>
                      </div>
                      <div class="col-md-8 filter-block">
                        <ul class="filter-options-list" ng-show="c.data.selectedCancerSite.length > 0 || c.data.selectedResearchType.length > 0 || 
                                                                 c.data.selectedSpecialTopic.length > 0 || c.data.selectedDoc.length > 0 || 
                                                                 c.data.selectedYear.length > 0 || c.data.selectedCmit.length > 0 || 
                                                                 c.data.selectedThemesGoals.length > 0 || c.data.selectedRecommendation.length > 0">
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedCancerSite">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateCancerSiteData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedResearchType">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateResearchTypeData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedSpecialTopic">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateSpecialTopicData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedDoc">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateDocData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedYear">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateYearData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedCmit">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateCmitData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedThemesGoals">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateThemesGoalsData({'id':t})">×</a>
                          </li>
                          <li class="filter-item" role="button" ng-repeat="t in c.data.selectedRecommendation">
                            <span>{{t.substring(1,t.length-1)}}</span>
                            <a class="remove-button" role="link" ng-click="c.updateRecommendationData({'id':t})">×</a>
                          </li>
                        </ul>
                      </div>
                      <div class="button-group">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="filter-btn-label">Category  </span> <span class="caret"></span></button>
                        <span class="tooltip-icon" 
                              uib-tooltip="Categories are the type of information collected. " 
                              tooltip-placement="top" tooltip-class="tooltipClass">
                          <i class="fa fa-question-circle" aria-hidden="true"></i>
                        </span>
                        <ul class="dropdown-menu">
                          <li class="dropdown-options">
                            <input type="checkbox" id="selectAll_Category" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-click="c.selectAll_Category()" ng-checked="c.data.selectedCategory.length != 0  && c.data.selectedCategory.length == c.data.tabs.length">&nbsp;All
                          </li>
                          <li class="dropdown-options" ng-repeat="cat in c.data.tabs">
                            <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="cat.selected" ng-click="c.updateFilter(cat)" value="{{cat.name}}" role="checkbox" aria-invalid="false" ng-checked="c.data.selectedCategory.indexOf(cat.name) > -1">&nbsp;{{cat.name}}
                          </li>
                        </ul>
                      </div>
                    </div>

                    <div class="panel-body panel-relative">
                      <uib-accordion close-others="false">
                        <div uib-accordion-group ng-repeat="tab in c.data.tabs" ng-if="tab.show" class="panel-default" is-open="tab.isOpen">
                          <uib-accordion-heading>
                            <div>
                              {{tab.name}} ({{tab.list.length}}) <a ng-if="tab.tmpl == 'u_kb_template_top_accomplishment' || tab.tmpl == 'u_kb_template_literature_summary' || tab.tmpl == 'u_kb_template_miscellaneous_me' || tab.tmpl == 'u_kb_template_presentations'" href="#" ng-click="c.gotoNewSubmission(tab.tmpl)" style="margin-left:20px;">+ Add new Article</a> <i class="pull-right" ng-class="{'fa fa-minus-square': tab.isOpen, 'fa fa-plus-square': !tab.isOpen}"></i>
                            </div>
                          </uib-accordion-heading>
                          <ul class="list-group">
                            <li class="list-group-item item-row" ng-repeat="result in tab.list" ng-show="$index >= (c.data.bigCurrentPage[tab.name] -1) * c.data.pageSize[tab.name] && $index < c.data.bigCurrentPage[tab.name] * c.data.pageSize[tab.name]">
                              <div class="checkbox-side">
                                <input type="checkbox" ng-model="cb_checkbox" ng-change="c.change(cb_checkbox)" class="checkbox content-checkbox" id="cb_{{result.sys_id}}" name="selections" value="{{result.sys_id}},{{result.kb_knowledge_base}},{{result.kb_category}}" >
                              </div>
                              <div class="content-side">
                                <i class="glyphicon glyphicon-file"></i>
                                <a class="kb-title ng-binding" ng-click="c.gotoDetail(result.sys_id, result.template, result.number)" role="link">{{result.title}}</a>
                                <br>
                                <!--
                                <div class="kb-ref">
                                  <span>{{result.kb_knowledge_base}} > {{result.kb_category}}</span>
                                </div>
                                -->
                                <div class="kb-about">
                                  Author: {{result.author}}
                                  <span class="dot-divider" aria-hidden="true"> • </span>
                                  Fiscal Year: {{result.fYear.substring(1, 5)}}
                                </div>
                              </div>
                              
                            </li>
                          </ul>
                          <div class="tab-paging-section">
                            <ul ng-show="(tab.list.length / c.data.pageSize[tab.name]) > 1"  uib-pagination total-items="tab.list.length" items-per-page="c.data.pageSize[tab.name]" ng-model="c.data.bigCurrentPage[tab.name]" max-size="c.data.maxSize" class="pagination-sm" ng-change="c.pageChanged()" direction-links="false" boundary-links="true" force-ellipses="true">
                            </ul>
                            <div class="tab-paging-setting">
                              <label for="my_pageSize" class="label-hidden">pageSize:</label>
                              <select class="form-control" id="my_pageSize" ng-model="c.data.pageSize[tab.name]" ng-init="c.data.pageSize[tab.name] = '10'">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="15">15</option>
                                <option value="20">20</option>
                              </select>
                            </div>
                            <div class="tab-paging-label">Items per page:</div>
                          </div>
                        </div>
                      </uib-accordion>
                    </div>
                </div>
            </div>

        <!-- End of row -->
    </div>

    <!-- End of container -->
</div>]]></template>
    </sp_widget>
</record_update>
