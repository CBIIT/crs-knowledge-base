<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $location, $http) {
	/* widget controller */
	$scope.$emit('crs.header.display', false);
	var c = this;
	
	c.isExportable = true;
	c.selectedCount = 0;
	
	var s = $location.search();
	
	c.search = function(type) {
		
		if(type == 1){
			c.data.selectedCategory = [];
			c.data.filters = [];
		}
		else if(type == 2){
			c.data.filters = [];
		}
		
		var defaultSelection = [];
		
		c.server.get({searchString: c.data.searchString, 
									selectedKnowledgeBase: c.data.selectedKnowledgeBase,
								  selectedCategory: c.data.selectedCategory,
								  selectedDoc: c.data.filters.includes('doc')? c.data.selectedDoc : defaultSelection,
									selectedCancerSite: c.data.filters.includes('cancer_site') ? c.data.selectedCancerSite : defaultSelection,
									selectedResearchType: c.data.filters.includes('research_type') ? c.data.selectedResearchType : defaultSelection
								 }).then(function(r) {
			c.data = r.data;
			c.searchResults = r.data.searchResults;
			c.selectedCount = 0;
			c.isExportable = false;
		});
	};
	
	c.reset = function() {
		c.data.searchString = "";
		c.data.selectedKnowledgeBase = c.data.knowledgeBases[0];
		c.data.selectedCategory = [];
		c.data.selectedDoc = [];
	  c.data.selectedCancerSite = [];
		c.data.selectedResearchType = [];
		
		c.search();
	};
	
	//Search on enter key pressed
	var searchBox = document.getElementById("kbSearchInput");
		searchBox.addEventListener("keyup", function(event) {
		// Cancel the default action, if needed
		event.preventDefault();
		// Number 13 is the "Enter" key on the keyboard
		if (event.keyCode === 13) {
			// Trigger the button element with a click
			c.search();
		}
	});
	
	document.getElementById("cb_selectAll").addEventListener("change", function() {
		if(this.checked) {
        document.getElementsByName("selections").forEach(function(obj){
					obj.checked = true;
				});
			c.isExportable = true;
    } else {
        document.getElementsByName("selections").forEach(function(obj){
					obj.checked = false;
				});
			c.isExportable = false;
    }
	});
	
	c.change = function(value){
		if(value){
			c.isExportable = true;
			c.selectedCount++;
		}
		else{
			c.selectedCount--;
			if(c.selectedCount <= 0){
				c.isExportable = false;
			}
		}
	}
	
	c.updateCategoryData = function(item){
		if(item.selected){
			c.data.selectedCategory.push(item.name);
		}
		else{
			var idx = c.data.selectedCategory.indexOf(item.name);
			if (idx > -1) {
				c.data.selectedCategory.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.updateCancerSiteData = function(item){
		if(item.selected){
			c.data.selectedCancerSite.push(item.name);
		}
		else{
			var idx = c.data.selectedCancerSite.indexOf(item.name);
			if (idx > -1) {
				c.data.selectedCancerSite.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.updateResearchTypeData = function(item){
		if(item.selected){
			c.data.selectedResearchType.push(item.name);
		}
		else{
			var idx = c.data.selectedResearchType.indexOf(item.name);
			if (idx > -1) {
				c.data.selectedResearchType.splice(idx, 1);
			}
		}
		c.search();
	}
	
	c.updateDocData = function(item){
		if(item.selected){
			c.data.selectedDoc.push(item.name);
		}
		else{
			var idx = c.data.selectedDoc.indexOf(item.name);
			if (idx > -1) {
				c.data.selectedDoc.splice(idx, 1);
			}
		}
		c.search();
	}
	
	// Perform an initial search when the page loads
	$scope.$watch('$viewContentLoaded', function() {
     c.search();
	});
	
	var htmlToWord = (function() {
      var uri = 'data:text/html,';
      var template = '<html xmlns:office="urn:schemas-microsoft-com:office:office" xmlns:word="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><xml><word:WordDocument><word:View>Print</word:View><word:Zoom>90</word:Zoom><word:DoNotOptimizeForBrowser/></word:WordDocument></xml></head><body>{content}</body></html>';
      return function(data) {
				 var a = document.createElement('a');
					document.body.appendChild(a);
					a.setAttribute('style', 'display:none');
					a.setAttribute('href', uri + encodeURIComponent((template.replace("{content}",data))));
					a.setAttribute('download', "report.doc");
					a.click();
          document.body.removeChild(a);
      }
    })()
	
  c.export2Excel = function () {
		var cache = [];
		document.getElementsByName('selections').forEach(function(obj){
			if(obj.checked){
				var info = obj.value.split(',');
				cache.push(info[0]);
			}
		});
		var data = [];
		c.searchResults.forEach(function(rs){
			if(cache.indexOf(rs.sys_id) >= 0){
				var tmp = {};
				tmp["Date entered"] = rs.published;
				tmp.Database = rs.kb_knowledge_base;
				tmp.Category = rs.kb_category;
				tmp.Title = rs.short_description;
				data.push(tmp);
			}
		});
		/* generate a worksheet */
		var ws = XLSX.utils.json_to_sheet(data);

		/* add to workbook */
		var wb = XLSX.utils.book_new();
		XLSX.utils.book_append_sheet(wb, ws, "hitlist");

		/* write workbook and force a download */
		XLSX.writeFile(wb, "report.xlsx");
  }
	
	c.export2Word = function () {
		var req = {
		 method: 'POST',
		 url: '/api/x_26385_crs_kd/export/word',
		 headers: {
			 'Content-Type': 'application/json'
		 }
		}
		
		req.data = {};
		req.data.files = [];
		document.getElementsByName('selections').forEach(function(obj){
			if(obj.checked){
				var fs = {};
				var info = obj.value.split(',');
				fs.sys_id = info[0];
				fs.kb = info[1];
				fs.category = info[2];
				req.data.files.push(fs);
			}
		});

		$http(req).then(function(resp){
			var content = resp.data.result.content;
			var dt = '';
			content.forEach(function(ct){
					dt += '<h1 style="text-align:center;">'+ct.title+'</h1>';
				  for(var key in ct){
						if(key != 'title'){
							dt += '<h3>'+key+':</h3>';
							dt += '<p>'+ct[key]+'</p>';
						}
					}
			});
			htmlToWord(dt);
		}, function(error_resp){
			console.log(error_resp);
		});
		
  }
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.body {
 font-family: "SourceSansPro", Helvetica, Arial, sans-serif; 
}

b {
	font-weight:bold;
  font-size:1.5em;
}

.crs-abbrv{
	font-size:1.4em;
  font-weight:bold;
  margin-top: 5px;
}

.crs-detail{
	font-size:1em;
  margin-top: 5px;
}

.crs-sidebar-info {
  height: 43px;
  margin-top: 5px;
  /*background: #46a1d9;*/
  background: #C6375D;
  color: white;
  position: relative;
  text-align: center;
  border-radius: 5px;
}
.crs-sidebar-info .details {
  position: absolute;
  left: 20px;
  right: 20px;
  z-index: 2;
  font-size: 0.8em;
  padding-top: 10px;
}
.crs-sidebar-info .details h1 {
  font-size: 1.4em;
  margin: 0 0 5px 0;
  font-weight: 400;
  position: relative;
  line-height: 1.2;
}

.panel-relative{
	position:relative;
}

.panel-action{
  top:5px;
  right:15px;
  float:right;
	position:absolute;
}


.margin-10 {
 margin-top: 10px; 
}

.margin-5 {
	margin-top: 5px; 
}

.panel-bar{
	font-size:13px;
}

.checkbox-all{
	float:left;
  margin:5px 5px 5px 2px;
}

.content-checkbox{
	position:absolute;
  left:-20px;
  top:30px;
}

.text {
	color: #717171;
}

.count {
 	font-size:16px; 
}


.kb-about {
 	color: #979797;
  padding-top: 3px;
  font-size: 12px;
}

.kb-title {
  font-size: 14px;
  font-weight: 600;
}

.kb-ref{
}

.list-group{
	margin-bottom: 20px;
  padding-left: 20px;
}

.kb-ref span{
	font-size:12px;
  color:#979797;
  display:block;
}

.kb-article-summary {
 	width: 100%;
  color: #717171;
  font-size: 13px;
  display: inline-flex;
  margin: 10px 0 8px 5px;
  padding: 0px;
}

.kb-breadcrumb {
 	color: #979797;
  padding-bottom: 2px;
  margin-top: -5px;
}

.btn-disable{
  background-color:transparent;
  border-color:transparent;
  box-shadow:none;
  color:darkgray;
  cursor:default;
}

.form-group{
	margin-bottom:0px;
}

.form-group .control-label{
	padding: 10px 15px;
  margin-bottom:0px;
  border-bottom: 1px solid #DDDDDD;
  width: 100%;
  background-color: #f5f5f5 ;
}

.form-content{
	padding:10px;
}

.form-info{
	color:#979797;
}

.form-btns{
	border-top:1px solid #DDDDDD;
}

.form-searchBox{
	margin-bottom:15px;
}

.facet-scroll{
  max-height: 160px;
  padding-top: 5px;
  padding-left: 15px;
  padding-bottom: 5px;
  overflow-y: auto;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>crs-kd-search</id>
        <internal>false</internal>
        <link/>
        <name>[crs] KD Search</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	/* Configuration */
	// A placeholder for the free text search field
	data.enterSearchStr = gs.getMessage("Enter search string");
	
	// Hard-coded properties
	// The names(titles) of the knowledge bases associated with CRS. Those are used to filter the available knowledge bases and results.
	var knowledgeBases = ["Basic Knowledge Base", "Program Descriptions", "Scientific Experts" ,"Final Report Knowledge Base"];
	
	// Categories and Filters associated to knowledge bases. Each category also has an associated template where custom properties are defined as sections
	var infos = {"Basic Knowledge Base":{'Top Accomplishments': {template_table: 'u_kb_template_top_accomplishment', filters:["cancer_site","research_type","doc"]},
														'Collaboration Report' : {template_table: 'u_kb_template_collaboration_report', filters:[]},
														'Significant Items':{template_table: 'u_kb_template_significant_item', filters:["cancer_site"]}}, 
							 "Program Descriptions":{categories:[], filters:[]}, 
							 "Scientific Experts":{categories:[], filters:[]},
							 "Final Report Knowledge Base":{'Triennial Report': {template_table: 'u_kb_template_triennial_report', filters:[]}}
							};

	/* SETUP */
	data.knowledgeBases = [{id: '-1', name: 'All'}];
	
	// Search for all CRS knowledge base titles to get their sys_ids
	var gr = new GlideRecord('kb_knowledge_base');
	gr.orderBy("order");
	gr.addQuery("title", "IN", knowledgeBases);
	gr.query();
	while (gr.next()) {
		var resultObj = {};
		$sp.getRecordDisplayValues(resultObj, gr, 'sys_id,title');
		data.knowledgeBases.push({id: resultObj.sys_id, name: resultObj.title});
	}

	// The Knowledge Base IDs to be used in search filters
	//currently, only "basic knowledge base" will be searched
	var kbSysIds = data.knowledgeBases.map(function (kb) {
		return kb.id;
	}).filter(function(id) {
		return id !== '-1';
	});

	// Get the categories for each knowledge base
	data.categories = [];
	if(input && input.selectedKnowledgeBase.id != "-1" ){
		var tmp = new GlideRecord('kb_category');
		tmp.addQuery('parent_id', input.selectedKnowledgeBase.id);
		tmp.query();
		var catList = [];
		while (tmp.next()) {
			var obj = {};
			$sp.getRecordDisplayValues(obj, tmp, 'sys_id, full_category');			
			catList.push({id: obj.sys_id, name: obj.full_category});
		}
		data.categories = data.categories.concat(catList);
		data.selectedKnowledgeBase = input.selectedKnowledgeBase;
		if(input.selectedCategory.length > 0){
			data.selectedCategory = input.selectedCategory;
			//merge filters if duplicate
			var cache = [];
			input.selectedCategory.forEach(function(cat){
				infos[input.selectedKnowledgeBase.name][cat].filters.forEach(function(fts){
					if(cache.indexOf(fts) == -1){
						cache.push(fts);
					}
				});
			});
			data.filters = cache;
		}
		else{
			data.selectedCategory = [];
			data.filters = [];
		}
	}
	else{
		data.selectedKnowledgeBase = {id: '-1', name: 'All'};
		data.selectedCategory = [];
		data.filters = [];
	}
	
	// DOC
	data.doc = [
		{id: 'doc_dcb', name: 'DCB'},
		{id: 'doc_dccps', name: 'DCCPS'},
		{id: 'doc_dcp', name: 'DCTD'},
		{id: 'doc_od_crchd', name: 'OD-CRCHD'},
		{id: 'doc_od_cssi', name: 'OD-CSSI'},
		{id: 'doc_od_obf', name: 'OD-OBF'},
		{id: 'doc_od_ogcr', name: 'OD-OGCR'},
		{id: 'doc_ccg', name: 'CCG'},
		{id: 'doc_ccr', name: 'CCR'},
		{id: 'doc_dceg', name: 'DCEG'},
		{id: 'doc_dcp', name: 'DCP'}
	];

	// Cancer Site
	data.cancerSite = [
		{id: 'cancer_site_brain', name: 'Brain'},
		{id: 'cancer_site_breast', name: 'Breast'},
		{id: 'cancer_site_lung', name: 'Lung'},
		{id: 'cancer_site_melanoma', name: 'Melanoma'},
		{id: 'cancer_site_multiple_myeloma', name: 'Multiple Myeloma'},
		{id: 'cancer_site-ovarian', name: 'Ovarian'},
		{id: 'cancer_site_pancreatic', name: 'Pancreatic'},
		{id: 'cancer_site_prostate', name: 'Prostate'},
		{id: 'cancer_site_small_cell_lung_cancer', name: 'Small Cell Lung Cancer'},
		{id: 'cancer_site_pediatric', name: 'Pediatric'}
	];
	
	// Research Type
	data.researchType = [
		{id: 'research_type_basic', name: 'Basic'},
		{id: 'research_type_pre_clinical', name: 'Pre-Clinical'},
		{id: 'research_type_clinical', name: 'Clinical'},
		{id: 'research_type_post_clinical', name: 'Post-Clinical'},
		{id: 'research_type_epidemiological', name: 'Epidemiological'},
		{id: 'research_type_population_science', name: 'Population Science'},
		{id: 'research_type_cancer_control', name: 'Cancer Control'}
	];
	
		/* SEARCH PROCESSING */
	
	if (input) {
		data.selectedDoc = input.selectedDoc;
		data.selectedCancerSite  = input.selectedCancerSite;
		data.selectedResearchType = input.selectedResearchType;
		
		data.result = "You searched for: " + input.searchString + ", in Knowledge base: " + input.selectedKnowledgeBase.name + ", category: " + input.selectedCategory.join(',');
		
		var searchString = input.searchString ?  input.searchString.trim() : null;
		
		data.searchResults = [];
				
		// The table that we need to search depends on the selected category. Every category is associated with a template, which is stored in a table that extends kb_knowledge

		//todo......
		if (input.selectedCategory.length == 0) {
			// No specific category - search the default n_knowledge table
			gr = new GlideRecord('kb_knowledge');
			if(input.selectedKnowledgeBase.id === '-1'){
				gr.addQuery('kb_knowledge_base', 'IN', kbSysIds);
			}
			else{
				gr.addQuery('kb_knowledge_base', input.selectedKnowledgeBase.id);
			}
			if (searchString) {
				// Index search
				gr.addQuery('IR_AND_QUERY', searchString);
				data.searchString = searchString;
			}
			
			gr.query();
			
			while (gr.next()) {
			
				var articleResult = {};
				$sp.getRecordDisplayValues(articleResult, gr, 'sys_id,short_description,kb_knowledge_base,kb_category,author,sys_updated_on,published,sys_view_count');
				articleResult.url = 'kb_view.do?sys_kb_id=' + articleResult.sys_id;

				data.searchResults.push(articleResult);
			}
		} else {
			var values = [];
			input.selectedCategory.forEach(function(cat){
				var tmpl = infos[input.selectedKnowledgeBase.name][cat].template_table;
				gr = new GlideRecord(tmpl);
				if (searchString) {
					// Index search
					gr.addQuery('IR_AND_QUERY', searchString);
					data.searchString = searchString;
				}

				if (input.selectedResearchType.length > 0) {
					gr.addQuery('u_kb_research_type', 'IN', input.selectedResearchType);
				}

				if (input.selectedCancerSite.length > 0) {
					gr.addQuery('u_kb_cancer_site_type', input.selectedCancerSite);
				}

				if (input.selectedDoc.length > 0) {
					gr.addQuery('u_kb_doc', input.selectedDoc);
				}

				gr.query();

				while (gr.next()) {

					var articleResult = {};
					$sp.getRecordDisplayValues(articleResult, gr, 'sys_id,short_description,kb_knowledge_base,kb_category,author,sys_updated_on,published,sys_view_count');
					articleResult.url = 'kb_view.do?sys_kb_id=' + articleResult.sys_id;
					values.push(articleResult);
				}
			});
			data.searchResults = values;
			
		}
	}
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-06-01 19:53:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>cf120a374fd213007221e321a310c724</sys_id>
        <sys_mod_count>367</sys_mod_count>
        <sys_name>[crs] KD Search</sys_name>
        <sys_package display_value="CRS Knowledge Database" source="x_26385_crs_kd">404e613b4f9213007221e321a310c738</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="CRS Knowledge Database">404e613b4f9213007221e321a310c738</sys_scope>
        <sys_update_name>sp_widget_cf120a374fd213007221e321a310c724</sys_update_name>
        <sys_updated_by>yuw5@nih.gov</sys_updated_by>
        <sys_updated_on>2018-06-26 14:58:41</sys_updated_on>
        <template><![CDATA[<div class="container">
  <div class="row">
        <div class="col-md-3">
            <!-- 3 columns search menu -->

            <div class="crs-sidebar-info">
                <div class="details" title="NCI Encyclopedia and Repository Database">
                  <b>NCI E</b>ncyclopedia and <b>R</b>epository <b>D</b>atabase
                </div>
            </div>
          
            <div class="panel panel-default margin-10">

                <div>

                    <div class="form-group">
                        <label class="control-label" for="kbSelect">Knowledge Base:</label>
                      <div class="form-content">
                         <select class="form-control" name="kbSelect" id="kbSelect" ng-options="option.name for option in c.data.knowledgeBases track by option.id"
                            ng-model="c.data.selectedKnowledgeBase" ng-change="c.search(1)">
                        </select>
                      </div>
                       
                    </div>

                    <div class="form-group">
                        <label class="control-label" for="categorySelect">Category:</label>
                      	<div class="facet-scroll">
                          <div class="form-info" ng-if="c.data.categories.length == 0">
                            	Please select a Knowledge Base above.
                          </div>
                          <div ng-repeat="item in c.data.categories" class="facet-field-padding ng-scope" style=""> 
                            <div ng-if="item.id" class="checkbox ng-scope"> 
                              <label class="checkbox-label ng-binding">
                                <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="item.selected" ng-click="c.updateCategoryData(item)" value="{{item.id}}" role="checkbox" aria-invalid="false" ng-checked="c.data.selectedCategory.indexOf(item.name) > -1">{{item.name}}</label> 
                            </div>
                          </div>
                        </div>
                    </div>
                  
                    <div class="form-group" ng-if="c.data.filters.includes('cancer_site')">
                        <label class="control-label" for="cancerSiteSelect">Cancer Site/Type:</label>
                      	<div class="facet-scroll"> 
                          <div ng-repeat="item in c.data.cancerSite" class="facet-field-padding ng-scope" style=""> 
                            <div ng-if="item.id" class="checkbox ng-scope"> 
                              <label class="checkbox-label ng-binding">
                                <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="item.selected" ng-click="c.updateCancerSiteData(item)" value="{{item.id}}" role="checkbox" aria-invalid="false" ng-checked="c.data.selectedCancerSite.indexOf(item.name) > -1">{{item.name}}</label> 
                            </div>
                          </div>
                        </div>
                    </div>

                    <div class="form-group" ng-if="c.data.filters.includes('research_type')">
                        <label class="control-label" for="researchTypeSelect">Research Type:</label>
                        <div class="facet-scroll"> 
                            <div ng-repeat="item in c.data.researchType" class="facet-field-padding ng-scope" style=""> 
                              <div ng-if="item.id" class="checkbox ng-scope"> 
                                <label class="checkbox-label ng-binding">
                                  <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="item.selected" ng-click="c.updateResearchTypeData(item)" value="{{item.id}}" role="checkbox" aria-invalid="false" ng-checked="c.data.selectedResearchType.indexOf(item.name) > -1">{{item.name}}</label> 
                              </div>
                            </div>
                          </div>
                    </div>
                  
                  	<div class="form-group" ng-if="c.data.filters.includes('doc')">
                        <label class="control-label" for="docSelect">DOC:</label>
                      <div class="facet-scroll"> 
                            <div ng-repeat="item in c.data.doc" class="facet-field-padding ng-scope" style=""> 
                              <div ng-if="item.id" class="checkbox ng-scope"> 
                                <label class="checkbox-label ng-binding">
                                  <input type="checkbox" class="chekbox-input ng-pristine ng-untouched ng-valid ng-empty" ng-model="item.selected" ng-click="c.updateDocData(item)" value="{{item.id}}" role="checkbox" aria-invalid="false" ng-checked="c.data.selectedDoc.indexOf(item.name) > -1">{{item.name}}</label> 
                              </div>
                            </div>
                          </div>
                    </div>
                  
                  	<div class="form-group form-btns">
                       <button type="submit" class="btn btn-link" ng-click="c.reset();">reset</button> 
                  	</div>

                    <!-- end form -->
                </div>
            </div>

            <!-- End of search column -->
        </div>


        <div class="col-md-9 margin-10">
            <!-- 9 columns results -->
 
                <div class="form-searchBox">
                    <label for="inputSuccess" class="control-label sr-only">${Search}</label>
                    <div class="input-group">
                        <input type="text" class="form-control" name="kbSearchInput" id="kbSearchInput" placeholder="{{::data.enterSearchStr}}" ng-model="c.data.searchString">
                        <span class="input-group-btn">
                            <button type="submit" class="btn btn-default" ng-click="c.search();">
                                <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                            </button>
                        </span>
                    </div>
                </div>


                <div class="panel panel-default">

                    <div class="panel-heading panel-relative">
                      <div class="panel-title">
                        <span class="count text">{{c.searchResults.length || 0}} Results</span>
                      </div>
                      <div class="panel-action" ng-if="c.isExportable">
                        <button class="btn btn-link" ng-click="c.export2Excel()">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Excel
                        </button>
                        <button class="btn btn-link" ng-click="c.export2Word()">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Word
                        </button>
                      </div>
                      <div class="panel-action" ng-if="!c.isExportable">
                        <button class="btn btn-disable">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Excel
                        </button>
                        <button class="btn btn-disable">
                          <span class="glyphicon glyphicon-share"></span>
                     			Export to Word
                        </button>
                      </div>
                    </div>
                  
                    <div class="panel-heading panel-relative">
                      <div class="panel-title">
                        <span class="panel-bar">
                          <input type="checkbox" class="checkbox checkbox-all" id="cb_selectAll" name="selectAll" value="all"> Select All
                        </span>
                      </div>
                    </div>

                    <div class="panel-body">
                        <ul class="list-group" ng-if="c.searchResults.length > 0">
                            <li class="list-group-item" ng-repeat="result in c.searchResults">
                              <input type="checkbox" ng-model="cb_checkbox" ng-change="c.change(cb_checkbox)" class="checkbox content-checkbox" id="cb_{{result.sys_id}}" name="selections" value="{{result.sys_id}},{{result.kb_knowledge_base}},{{result.kb_category}}" >
                                <i class="glyphicon glyphicon-file"></i>
                               
                                	<a class="kb-title" ng-href="{{result.url}}" target="_blank">{{result.short_description}}</a>
                               
                                <br>
                                <div class="kb-ref">
                                	<span>{{result.kb_knowledge_base}} > {{result.kb_category}}</span>
                              	</div>
                              	<div class="kb-about">
                                
                                    Author: {{result.author}}
                                    <span class="dot" aria-hidden="true"> • </span>
                                    {{result.sys_view_count}} Views
                                    <span class="dot" aria-hidden="true"> • </span>
                                    Updated: <sn-time-ago timestamp="::result.sys_updated_on"/>
                                    <span class="dot" aria-hidden="true"> • </span>
                                    Published: <sn-time-ago timestamp="::result.published"/>
                                  
                                
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

        <!-- End of row -->
    </div>

    <!-- End of container -->
</div>]]></template>
    </sp_widget>
</record_update>
